<?php

namespace Proxies\__CG__\App\Entity\Channel;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Channel extends \App\Entity\Channel\Channel implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'baseCurrency', 'defaultLocale', 'defaultTaxZone', 'taxCalculationStrategy', 'currencies', 'locales', 'countries', 'themeName', 'contactEmail', 'skippingShippingStepAllowed', 'skippingPaymentStepAllowed', 'accountVerificationRequired', 'shopBillingData', 'menuTaxon', 'id', 'code', 'name', 'description', 'hostname', 'color', 'createdAt', 'updatedAt', 'enabled'];
        }

        return ['__isInitialized__', 'baseCurrency', 'defaultLocale', 'defaultTaxZone', 'taxCalculationStrategy', 'currencies', 'locales', 'countries', 'themeName', 'contactEmail', 'skippingShippingStepAllowed', 'skippingPaymentStepAllowed', 'accountVerificationRequired', 'shopBillingData', 'menuTaxon', 'id', 'code', 'name', 'description', 'hostname', 'color', 'createdAt', 'updatedAt', 'enabled'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Channel $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getBaseCurrency(): ?\Sylius\Component\Currency\Model\CurrencyInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBaseCurrency', []);

        return parent::getBaseCurrency();
    }

    /**
     * {@inheritDoc}
     */
    public function setBaseCurrency(?\Sylius\Component\Currency\Model\CurrencyInterface $baseCurrency): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBaseCurrency', [$baseCurrency]);

        parent::setBaseCurrency($baseCurrency);
    }

    /**
     * {@inheritDoc}
     */
    public function getDefaultLocale(): ?\Sylius\Component\Locale\Model\LocaleInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDefaultLocale', []);

        return parent::getDefaultLocale();
    }

    /**
     * {@inheritDoc}
     */
    public function setDefaultLocale(?\Sylius\Component\Locale\Model\LocaleInterface $defaultLocale): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDefaultLocale', [$defaultLocale]);

        parent::setDefaultLocale($defaultLocale);
    }

    /**
     * {@inheritDoc}
     */
    public function getDefaultTaxZone(): ?\Sylius\Component\Addressing\Model\ZoneInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDefaultTaxZone', []);

        return parent::getDefaultTaxZone();
    }

    /**
     * {@inheritDoc}
     */
    public function setDefaultTaxZone(?\Sylius\Component\Addressing\Model\ZoneInterface $defaultTaxZone): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDefaultTaxZone', [$defaultTaxZone]);

        parent::setDefaultTaxZone($defaultTaxZone);
    }

    /**
     * {@inheritDoc}
     */
    public function getTaxCalculationStrategy(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTaxCalculationStrategy', []);

        return parent::getTaxCalculationStrategy();
    }

    /**
     * {@inheritDoc}
     */
    public function setTaxCalculationStrategy(?string $taxCalculationStrategy): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTaxCalculationStrategy', [$taxCalculationStrategy]);

        parent::setTaxCalculationStrategy($taxCalculationStrategy);
    }

    /**
     * {@inheritDoc}
     */
    public function getCurrencies(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCurrencies', []);

        return parent::getCurrencies();
    }

    /**
     * {@inheritDoc}
     */
    public function addCurrency(\Sylius\Component\Currency\Model\CurrencyInterface $currency): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addCurrency', [$currency]);

        parent::addCurrency($currency);
    }

    /**
     * {@inheritDoc}
     */
    public function removeCurrency(\Sylius\Component\Currency\Model\CurrencyInterface $currency): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeCurrency', [$currency]);

        parent::removeCurrency($currency);
    }

    /**
     * {@inheritDoc}
     */
    public function hasCurrency(\Sylius\Component\Currency\Model\CurrencyInterface $currency): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasCurrency', [$currency]);

        return parent::hasCurrency($currency);
    }

    /**
     * {@inheritDoc}
     */
    public function getLocales(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLocales', []);

        return parent::getLocales();
    }

    /**
     * {@inheritDoc}
     */
    public function addLocale(\Sylius\Component\Locale\Model\LocaleInterface $locale): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addLocale', [$locale]);

        parent::addLocale($locale);
    }

    /**
     * {@inheritDoc}
     */
    public function removeLocale(\Sylius\Component\Locale\Model\LocaleInterface $locale): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeLocale', [$locale]);

        parent::removeLocale($locale);
    }

    /**
     * {@inheritDoc}
     */
    public function hasLocale(\Sylius\Component\Locale\Model\LocaleInterface $locale): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasLocale', [$locale]);

        return parent::hasLocale($locale);
    }

    /**
     * {@inheritDoc}
     */
    public function getCountries(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCountries', []);

        return parent::getCountries();
    }

    /**
     * {@inheritDoc}
     */
    public function addCountry(\Sylius\Component\Addressing\Model\CountryInterface $country): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addCountry', [$country]);

        parent::addCountry($country);
    }

    /**
     * {@inheritDoc}
     */
    public function removeCountry(\Sylius\Component\Addressing\Model\CountryInterface $country): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeCountry', [$country]);

        parent::removeCountry($country);
    }

    /**
     * {@inheritDoc}
     */
    public function hasCountry(\Sylius\Component\Addressing\Model\CountryInterface $country): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasCountry', [$country]);

        return parent::hasCountry($country);
    }

    /**
     * {@inheritDoc}
     */
    public function getThemeName(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getThemeName', []);

        return parent::getThemeName();
    }

    /**
     * {@inheritDoc}
     */
    public function setThemeName(?string $themeName): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setThemeName', [$themeName]);

        parent::setThemeName($themeName);
    }

    /**
     * {@inheritDoc}
     */
    public function getContactEmail(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContactEmail', []);

        return parent::getContactEmail();
    }

    /**
     * {@inheritDoc}
     */
    public function setContactEmail(?string $contactEmail): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContactEmail', [$contactEmail]);

        parent::setContactEmail($contactEmail);
    }

    /**
     * {@inheritDoc}
     */
    public function isSkippingShippingStepAllowed(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isSkippingShippingStepAllowed', []);

        return parent::isSkippingShippingStepAllowed();
    }

    /**
     * {@inheritDoc}
     */
    public function setSkippingShippingStepAllowed(bool $skippingShippingStepAllowed): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSkippingShippingStepAllowed', [$skippingShippingStepAllowed]);

        parent::setSkippingShippingStepAllowed($skippingShippingStepAllowed);
    }

    /**
     * {@inheritDoc}
     */
    public function isSkippingPaymentStepAllowed(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isSkippingPaymentStepAllowed', []);

        return parent::isSkippingPaymentStepAllowed();
    }

    /**
     * {@inheritDoc}
     */
    public function setSkippingPaymentStepAllowed(bool $skippingPaymentStepAllowed): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSkippingPaymentStepAllowed', [$skippingPaymentStepAllowed]);

        parent::setSkippingPaymentStepAllowed($skippingPaymentStepAllowed);
    }

    /**
     * {@inheritDoc}
     */
    public function isAccountVerificationRequired(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isAccountVerificationRequired', []);

        return parent::isAccountVerificationRequired();
    }

    /**
     * {@inheritDoc}
     */
    public function setAccountVerificationRequired(bool $accountVerificationRequired): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAccountVerificationRequired', [$accountVerificationRequired]);

        parent::setAccountVerificationRequired($accountVerificationRequired);
    }

    /**
     * {@inheritDoc}
     */
    public function getShopBillingData(): ?\Sylius\Component\Core\Model\ShopBillingDataInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getShopBillingData', []);

        return parent::getShopBillingData();
    }

    /**
     * {@inheritDoc}
     */
    public function setShopBillingData(\Sylius\Component\Core\Model\ShopBillingDataInterface $shopBillingData): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setShopBillingData', [$shopBillingData]);

        parent::setShopBillingData($shopBillingData);
    }

    /**
     * {@inheritDoc}
     */
    public function getMenuTaxon(): ?\Sylius\Component\Core\Model\TaxonInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMenuTaxon', []);

        return parent::getMenuTaxon();
    }

    /**
     * {@inheritDoc}
     */
    public function setMenuTaxon(?\Sylius\Component\Core\Model\TaxonInterface $menuTaxon): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMenuTaxon', [$menuTaxon]);

        parent::setMenuTaxon($menuTaxon);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getCode(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCode', []);

        return parent::getCode();
    }

    /**
     * {@inheritDoc}
     */
    public function setCode(?string $code): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCode', [$code]);

        parent::setCode($code);
    }

    /**
     * {@inheritDoc}
     */
    public function getName(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName(?string $name): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription(?string $description): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$description]);

        parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getHostname(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHostname', []);

        return parent::getHostname();
    }

    /**
     * {@inheritDoc}
     */
    public function setHostname(?string $hostname): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHostname', [$hostname]);

        parent::setHostname($hostname);
    }

    /**
     * {@inheritDoc}
     */
    public function getColor(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getColor', []);

        return parent::getColor();
    }

    /**
     * {@inheritDoc}
     */
    public function setColor(?string $color): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setColor', [$color]);

        parent::setColor($color);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(?\DateTimeInterface $createdAt): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt(?\DateTimeInterface $updatedAt): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updatedAt]);

        parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function isEnabled(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isEnabled', []);

        return parent::isEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function setEnabled(?bool $enabled): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEnabled', [$enabled]);

        parent::setEnabled($enabled);
    }

    /**
     * {@inheritDoc}
     */
    public function enable(): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'enable', []);

        parent::enable();
    }

    /**
     * {@inheritDoc}
     */
    public function disable(): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'disable', []);

        parent::disable();
    }

}
