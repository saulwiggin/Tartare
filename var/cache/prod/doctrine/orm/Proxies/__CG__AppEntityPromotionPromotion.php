<?php

namespace Proxies\__CG__\App\Entity\Promotion;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Promotion extends \App\Entity\Promotion\Promotion implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'channels', 'id', 'code', 'name', 'description', 'priority', 'exclusive', 'usageLimit', 'used', 'startsAt', 'endsAt', 'couponBased', 'coupons', 'rules', 'actions', 'createdAt', 'updatedAt'];
        }

        return ['__isInitialized__', 'channels', 'id', 'code', 'name', 'description', 'priority', 'exclusive', 'usageLimit', 'used', 'startsAt', 'endsAt', 'couponBased', 'coupons', 'rules', 'actions', 'createdAt', 'updatedAt'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Promotion $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getChannels(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChannels', []);

        return parent::getChannels();
    }

    /**
     * {@inheritDoc}
     */
    public function addChannel(\Sylius\Component\Channel\Model\ChannelInterface $channel): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addChannel', [$channel]);

        parent::addChannel($channel);
    }

    /**
     * {@inheritDoc}
     */
    public function removeChannel(\Sylius\Component\Channel\Model\ChannelInterface $channel): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeChannel', [$channel]);

        parent::removeChannel($channel);
    }

    /**
     * {@inheritDoc}
     */
    public function hasChannel(\Sylius\Component\Channel\Model\ChannelInterface $channel): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasChannel', [$channel]);

        return parent::hasChannel($channel);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getCode(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCode', []);

        return parent::getCode();
    }

    /**
     * {@inheritDoc}
     */
    public function setCode(?string $code): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCode', [$code]);

        parent::setCode($code);
    }

    /**
     * {@inheritDoc}
     */
    public function getName(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName(?string $name): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription(?string $description): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$description]);

        parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getPriority(): int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPriority', []);

        return parent::getPriority();
    }

    /**
     * {@inheritDoc}
     */
    public function setPriority(?int $priority): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPriority', [$priority]);

        parent::setPriority($priority);
    }

    /**
     * {@inheritDoc}
     */
    public function isExclusive(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isExclusive', []);

        return parent::isExclusive();
    }

    /**
     * {@inheritDoc}
     */
    public function setExclusive(?bool $exclusive): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExclusive', [$exclusive]);

        parent::setExclusive($exclusive);
    }

    /**
     * {@inheritDoc}
     */
    public function getUsageLimit(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsageLimit', []);

        return parent::getUsageLimit();
    }

    /**
     * {@inheritDoc}
     */
    public function setUsageLimit(?int $usageLimit): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUsageLimit', [$usageLimit]);

        parent::setUsageLimit($usageLimit);
    }

    /**
     * {@inheritDoc}
     */
    public function getUsed(): int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsed', []);

        return parent::getUsed();
    }

    /**
     * {@inheritDoc}
     */
    public function setUsed(?int $used): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUsed', [$used]);

        parent::setUsed($used);
    }

    /**
     * {@inheritDoc}
     */
    public function incrementUsed(): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'incrementUsed', []);

        parent::incrementUsed();
    }

    /**
     * {@inheritDoc}
     */
    public function decrementUsed(): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'decrementUsed', []);

        parent::decrementUsed();
    }

    /**
     * {@inheritDoc}
     */
    public function getStartsAt(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStartsAt', []);

        return parent::getStartsAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setStartsAt(?\DateTimeInterface $startsAt): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStartsAt', [$startsAt]);

        parent::setStartsAt($startsAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getEndsAt(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEndsAt', []);

        return parent::getEndsAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setEndsAt(?\DateTimeInterface $endsAt): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEndsAt', [$endsAt]);

        parent::setEndsAt($endsAt);
    }

    /**
     * {@inheritDoc}
     */
    public function isCouponBased(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isCouponBased', []);

        return parent::isCouponBased();
    }

    /**
     * {@inheritDoc}
     */
    public function setCouponBased(?bool $couponBased): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCouponBased', [$couponBased]);

        parent::setCouponBased($couponBased);
    }

    /**
     * {@inheritDoc}
     */
    public function getCoupons(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCoupons', []);

        return parent::getCoupons();
    }

    /**
     * {@inheritDoc}
     */
    public function hasCoupons(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasCoupons', []);

        return parent::hasCoupons();
    }

    /**
     * {@inheritDoc}
     */
    public function hasCoupon(\Sylius\Component\Promotion\Model\PromotionCouponInterface $coupon): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasCoupon', [$coupon]);

        return parent::hasCoupon($coupon);
    }

    /**
     * {@inheritDoc}
     */
    public function addCoupon(\Sylius\Component\Promotion\Model\PromotionCouponInterface $coupon): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addCoupon', [$coupon]);

        parent::addCoupon($coupon);
    }

    /**
     * {@inheritDoc}
     */
    public function removeCoupon(\Sylius\Component\Promotion\Model\PromotionCouponInterface $coupon): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeCoupon', [$coupon]);

        parent::removeCoupon($coupon);
    }

    /**
     * {@inheritDoc}
     */
    public function getRules(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRules', []);

        return parent::getRules();
    }

    /**
     * {@inheritDoc}
     */
    public function hasRules(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasRules', []);

        return parent::hasRules();
    }

    /**
     * {@inheritDoc}
     */
    public function hasRule(\Sylius\Component\Promotion\Model\PromotionRuleInterface $rule): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasRule', [$rule]);

        return parent::hasRule($rule);
    }

    /**
     * {@inheritDoc}
     */
    public function addRule(\Sylius\Component\Promotion\Model\PromotionRuleInterface $rule): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addRule', [$rule]);

        parent::addRule($rule);
    }

    /**
     * {@inheritDoc}
     */
    public function removeRule(\Sylius\Component\Promotion\Model\PromotionRuleInterface $rule): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeRule', [$rule]);

        parent::removeRule($rule);
    }

    /**
     * {@inheritDoc}
     */
    public function getActions(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getActions', []);

        return parent::getActions();
    }

    /**
     * {@inheritDoc}
     */
    public function hasActions(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasActions', []);

        return parent::hasActions();
    }

    /**
     * {@inheritDoc}
     */
    public function hasAction(\Sylius\Component\Promotion\Model\PromotionActionInterface $action): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasAction', [$action]);

        return parent::hasAction($action);
    }

    /**
     * {@inheritDoc}
     */
    public function addAction(\Sylius\Component\Promotion\Model\PromotionActionInterface $action): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addAction', [$action]);

        parent::addAction($action);
    }

    /**
     * {@inheritDoc}
     */
    public function removeAction(\Sylius\Component\Promotion\Model\PromotionActionInterface $action): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAction', [$action]);

        parent::removeAction($action);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(?\DateTimeInterface $createdAt): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt(?\DateTimeInterface $updatedAt): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updatedAt]);

        parent::setUpdatedAt($updatedAt);
    }

}
