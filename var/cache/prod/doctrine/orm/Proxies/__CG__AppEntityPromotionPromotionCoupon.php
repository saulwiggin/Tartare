<?php

namespace Proxies\__CG__\App\Entity\Promotion;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class PromotionCoupon extends \App\Entity\Promotion\PromotionCoupon implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'perCustomerUsageLimit', 'reusableFromCancelledOrders', 'id', 'code', 'usageLimit', 'used', 'promotion', 'expiresAt', 'createdAt', 'updatedAt'];
        }

        return ['__isInitialized__', 'perCustomerUsageLimit', 'reusableFromCancelledOrders', 'id', 'code', 'usageLimit', 'used', 'promotion', 'expiresAt', 'createdAt', 'updatedAt'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (PromotionCoupon $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getPerCustomerUsageLimit(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPerCustomerUsageLimit', []);

        return parent::getPerCustomerUsageLimit();
    }

    /**
     * {@inheritDoc}
     */
    public function setPerCustomerUsageLimit(?int $perCustomerUsageLimit): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPerCustomerUsageLimit', [$perCustomerUsageLimit]);

        parent::setPerCustomerUsageLimit($perCustomerUsageLimit);
    }

    /**
     * {@inheritDoc}
     */
    public function isReusableFromCancelledOrders(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isReusableFromCancelledOrders', []);

        return parent::isReusableFromCancelledOrders();
    }

    /**
     * {@inheritDoc}
     */
    public function setReusableFromCancelledOrders(bool $reusableFromCancelledOrders): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setReusableFromCancelledOrders', [$reusableFromCancelledOrders]);

        parent::setReusableFromCancelledOrders($reusableFromCancelledOrders);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getCode(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCode', []);

        return parent::getCode();
    }

    /**
     * {@inheritDoc}
     */
    public function setCode(?string $code): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCode', [$code]);

        parent::setCode($code);
    }

    /**
     * {@inheritDoc}
     */
    public function getUsageLimit(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsageLimit', []);

        return parent::getUsageLimit();
    }

    /**
     * {@inheritDoc}
     */
    public function setUsageLimit(?int $usageLimit): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUsageLimit', [$usageLimit]);

        parent::setUsageLimit($usageLimit);
    }

    /**
     * {@inheritDoc}
     */
    public function getUsed(): int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsed', []);

        return parent::getUsed();
    }

    /**
     * {@inheritDoc}
     */
    public function setUsed(int $used): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUsed', [$used]);

        parent::setUsed($used);
    }

    /**
     * {@inheritDoc}
     */
    public function incrementUsed(): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'incrementUsed', []);

        parent::incrementUsed();
    }

    /**
     * {@inheritDoc}
     */
    public function decrementUsed(): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'decrementUsed', []);

        parent::decrementUsed();
    }

    /**
     * {@inheritDoc}
     */
    public function getPromotion(): ?\Sylius\Component\Promotion\Model\PromotionInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPromotion', []);

        return parent::getPromotion();
    }

    /**
     * {@inheritDoc}
     */
    public function setPromotion(?\Sylius\Component\Promotion\Model\PromotionInterface $promotion): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPromotion', [$promotion]);

        parent::setPromotion($promotion);
    }

    /**
     * {@inheritDoc}
     */
    public function getExpiresAt(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExpiresAt', []);

        return parent::getExpiresAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setExpiresAt(\DateTimeInterface $expiresAt = NULL): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExpiresAt', [$expiresAt]);

        parent::setExpiresAt($expiresAt);
    }

    /**
     * {@inheritDoc}
     */
    public function isValid(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isValid', []);

        return parent::isValid();
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(?\DateTimeInterface $createdAt): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt(?\DateTimeInterface $updatedAt): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updatedAt]);

        parent::setUpdatedAt($updatedAt);
    }

}
