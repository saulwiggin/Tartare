<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the public 'liip_imagine.filter.manager' shared service.

include_once \dirname(__DIR__, 4).'/vendor/liip/imagine-bundle/Imagine/Filter/FilterManager.php';
include_once \dirname(__DIR__, 4).'/vendor/liip/imagine-bundle/Imagine/Filter/Loader/LoaderInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/liip/imagine-bundle/Imagine/Filter/Loader/RelativeResizeFilterLoader.php';
include_once \dirname(__DIR__, 4).'/vendor/liip/imagine-bundle/Imagine/Filter/Loader/ResizeFilterLoader.php';
include_once \dirname(__DIR__, 4).'/vendor/liip/imagine-bundle/Imagine/Filter/Loader/ThumbnailFilterLoader.php';
include_once \dirname(__DIR__, 4).'/vendor/liip/imagine-bundle/Imagine/Filter/Loader/CropFilterLoader.php';
include_once \dirname(__DIR__, 4).'/vendor/liip/imagine-bundle/Imagine/Filter/Loader/GrayscaleFilterLoader.php';
include_once \dirname(__DIR__, 4).'/vendor/liip/imagine-bundle/Imagine/Filter/Loader/StripFilterLoader.php';
include_once \dirname(__DIR__, 4).'/vendor/liip/imagine-bundle/Imagine/Filter/Loader/ScaleFilterLoader.php';
include_once \dirname(__DIR__, 4).'/vendor/liip/imagine-bundle/Imagine/Filter/Loader/UpscaleFilterLoader.php';
include_once \dirname(__DIR__, 4).'/vendor/liip/imagine-bundle/Imagine/Filter/Loader/DownscaleFilterLoader.php';
include_once \dirname(__DIR__, 4).'/vendor/liip/imagine-bundle/Imagine/Filter/Loader/AutoRotateFilterLoader.php';
include_once \dirname(__DIR__, 4).'/vendor/liip/imagine-bundle/Imagine/Filter/Loader/RotateFilterLoader.php';
include_once \dirname(__DIR__, 4).'/vendor/liip/imagine-bundle/Imagine/Filter/Loader/FlipFilterLoader.php';
include_once \dirname(__DIR__, 4).'/vendor/liip/imagine-bundle/Imagine/Filter/Loader/InterlaceFilterLoader.php';
include_once \dirname(__DIR__, 4).'/vendor/liip/imagine-bundle/Imagine/Filter/Loader/FixedFilterLoader.php';
include_once \dirname(__DIR__, 4).'/vendor/liip/imagine-bundle/Imagine/Filter/PostProcessor/PostProcessorInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/liip/imagine-bundle/Imagine/Filter/PostProcessor/AbstractPostProcessor.php';
include_once \dirname(__DIR__, 4).'/vendor/liip/imagine-bundle/Imagine/Filter/PostProcessor/PngquantPostProcessor.php';
include_once \dirname(__DIR__, 4).'/vendor/liip/imagine-bundle/Imagine/Filter/PostProcessor/MozJpegPostProcessor.php';

$this->services['liip_imagine.filter.manager'] = $instance = new \Liip\ImagineBundle\Imagine\Filter\FilterManager(($this->privates['liip_imagine.filter.configuration'] ?? $this->getLiipImagine_Filter_ConfigurationService()), ($this->privates['liip_imagine.gd'] ?? $this->load('getLiipImagine_GdService.php')), ($this->privates['liip_imagine.binary.mime_type_guesser'] ?? $this->load('getLiipImagine_Binary_MimeTypeGuesserService.php')));

$instance->addLoader('relative_resize', ($this->privates['liip_imagine.filter.loader.relative_resize'] ?? ($this->privates['liip_imagine.filter.loader.relative_resize'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\RelativeResizeFilterLoader())));
$instance->addLoader('resize', ($this->privates['liip_imagine.filter.loader.resize'] ?? ($this->privates['liip_imagine.filter.loader.resize'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\ResizeFilterLoader())));
$instance->addLoader('thumbnail', ($this->privates['liip_imagine.filter.loader.thumbnail'] ?? ($this->privates['liip_imagine.filter.loader.thumbnail'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\ThumbnailFilterLoader())));
$instance->addLoader('crop', ($this->privates['liip_imagine.filter.loader.crop'] ?? ($this->privates['liip_imagine.filter.loader.crop'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\CropFilterLoader())));
$instance->addLoader('grayscale', ($this->services['liip_imagine.filter.loader.grayscale'] ?? ($this->services['liip_imagine.filter.loader.grayscale'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\GrayscaleFilterLoader())));
$instance->addLoader('paste_image', ($this->privates['liip_imagine.filter.loader.paste_image'] ?? $this->load('getLiipImagine_Filter_Loader_PasteImageService.php')));
$instance->addLoader('paste', ($this->privates['liip_imagine.filter.loader.paste'] ?? $this->load('getLiipImagine_Filter_Loader_PasteService.php')));
$instance->addLoader('watermark', ($this->privates['liip_imagine.filter.loader.watermark'] ?? $this->load('getLiipImagine_Filter_Loader_WatermarkService.php')));
$instance->addLoader('watermark_image', ($this->privates['liip_imagine.filter.loader.watermark_image'] ?? $this->load('getLiipImagine_Filter_Loader_WatermarkImageService.php')));
$instance->addLoader('background', ($this->privates['liip_imagine.filter.loader.background'] ?? $this->load('getLiipImagine_Filter_Loader_BackgroundService.php')));
$instance->addLoader('strip', ($this->privates['liip_imagine.filter.loader.strip'] ?? ($this->privates['liip_imagine.filter.loader.strip'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\StripFilterLoader())));
$instance->addLoader('scale', ($this->privates['liip_imagine.filter.loader.scale'] ?? ($this->privates['liip_imagine.filter.loader.scale'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\ScaleFilterLoader())));
$instance->addLoader('upscale', ($this->privates['liip_imagine.filter.loader.upscale'] ?? ($this->privates['liip_imagine.filter.loader.upscale'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\UpscaleFilterLoader())));
$instance->addLoader('downscale', ($this->services['liip_imagine.filter.loader.downscale'] ?? ($this->services['liip_imagine.filter.loader.downscale'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\DownscaleFilterLoader())));
$instance->addLoader('auto_rotate', ($this->privates['liip_imagine.filter.loader.auto_rotate'] ?? ($this->privates['liip_imagine.filter.loader.auto_rotate'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\AutoRotateFilterLoader())));
$instance->addLoader('rotate', ($this->services['liip_imagine.filter.loader.rotate'] ?? ($this->services['liip_imagine.filter.loader.rotate'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\RotateFilterLoader())));
$instance->addLoader('flip', ($this->services['liip_imagine.filter.loader.flip'] ?? ($this->services['liip_imagine.filter.loader.flip'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\FlipFilterLoader())));
$instance->addLoader('interlace', ($this->services['liip_imagine.filter.loader.interlace'] ?? ($this->services['liip_imagine.filter.loader.interlace'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\InterlaceFilterLoader())));
$instance->addLoader('resample', ($this->services['liip_imagine.filter.loader.resample'] ?? $this->load('getLiipImagine_Filter_Loader_ResampleService.php')));
$instance->addLoader('fixed', ($this->services['liip_imagine.filter.loader.fixed'] ?? ($this->services['liip_imagine.filter.loader.fixed'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\FixedFilterLoader())));
$instance->addPostProcessor('jpegoptim', ($this->privates['liip_imagine.filter.post_processor.jpegoptim'] ?? $this->load('getLiipImagine_Filter_PostProcessor_JpegoptimService.php')));
$instance->addPostProcessor('optipng', ($this->privates['liip_imagine.filter.post_processor.optipng'] ?? $this->load('getLiipImagine_Filter_PostProcessor_OptipngService.php')));
$instance->addPostProcessor('pngquant', ($this->privates['liip_imagine.filter.post_processor.pngquant'] ?? ($this->privates['liip_imagine.filter.post_processor.pngquant'] = new \Liip\ImagineBundle\Imagine\Filter\PostProcessor\PngquantPostProcessor('/usr/bin/pngquant'))));
$instance->addPostProcessor('mozjpeg', ($this->privates['liip_imagine.filter.post_processor.mozjpeg'] ?? ($this->privates['liip_imagine.filter.post_processor.mozjpeg'] = new \Liip\ImagineBundle\Imagine\Filter\PostProcessor\MozJpegPostProcessor('/opt/mozjpeg/bin/cjpeg'))));

return $instance;
