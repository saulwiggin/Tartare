<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the private 'liip_imagine.config.filter_factory_collection' shared service.

include_once \dirname(__DIR__, 4).'/vendor/liip/imagine-bundle/Config/FilterFactoryCollection.php';
include_once \dirname(__DIR__, 4).'/vendor/liip/imagine-bundle/Factory/Config/FilterFactoryInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/liip/imagine-bundle/Factory/Config/Filter/AutoRotateFactory.php';
include_once \dirname(__DIR__, 4).'/vendor/liip/imagine-bundle/Factory/Config/Filter/FlipFactory.php';
include_once \dirname(__DIR__, 4).'/vendor/liip/imagine-bundle/Factory/Config/Filter/GrayscaleFactory.php';
include_once \dirname(__DIR__, 4).'/vendor/liip/imagine-bundle/Factory/Config/Filter/InterlaceFactory.php';
include_once \dirname(__DIR__, 4).'/vendor/liip/imagine-bundle/Factory/Config/Filter/RelativeResizeFactory.php';
include_once \dirname(__DIR__, 4).'/vendor/liip/imagine-bundle/Factory/Config/Filter/RotateFactory.php';
include_once \dirname(__DIR__, 4).'/vendor/liip/imagine-bundle/Factory/Config/Filter/StripFactory.php';
include_once \dirname(__DIR__, 4).'/vendor/liip/imagine-bundle/Factory/Config/Filter/WatermarkFactory.php';

return $this->privates['liip_imagine.config.filter_factory_collection'] = new \Liip\ImagineBundle\Config\FilterFactoryCollection(($this->privates['liip_imagine.factory.config.filter.auto_rotate'] ?? ($this->privates['liip_imagine.factory.config.filter.auto_rotate'] = new \Liip\ImagineBundle\Factory\Config\Filter\AutoRotateFactory())), ($this->privates['liip_imagine.factory.config.filter.background'] ?? $this->load('getLiipImagine_Factory_Config_Filter_BackgroundService.php')), ($this->privates['liip_imagine.factory.config.filter.crop'] ?? $this->load('getLiipImagine_Factory_Config_Filter_CropService.php')), ($this->privates['liip_imagine.factory.config.filter.downscale'] ?? $this->load('getLiipImagine_Factory_Config_Filter_DownscaleService.php')), ($this->privates['liip_imagine.factory.config.filter.flip'] ?? ($this->privates['liip_imagine.factory.config.filter.flip'] = new \Liip\ImagineBundle\Factory\Config\Filter\FlipFactory())), ($this->privates['liip_imagine.factory.config.filter.grayscale'] ?? ($this->privates['liip_imagine.factory.config.filter.grayscale'] = new \Liip\ImagineBundle\Factory\Config\Filter\GrayscaleFactory())), ($this->privates['liip_imagine.factory.config.filter.interlace'] ?? ($this->privates['liip_imagine.factory.config.filter.interlace'] = new \Liip\ImagineBundle\Factory\Config\Filter\InterlaceFactory())), ($this->privates['liip_imagine.factory.config.filter.paste'] ?? $this->load('getLiipImagine_Factory_Config_Filter_PasteService.php')), ($this->privates['liip_imagine.factory.config.filter.relative_resize'] ?? ($this->privates['liip_imagine.factory.config.filter.relative_resize'] = new \Liip\ImagineBundle\Factory\Config\Filter\RelativeResizeFactory())), ($this->privates['liip_imagine.factory.config.filter.resize'] ?? $this->load('getLiipImagine_Factory_Config_Filter_ResizeService.php')), ($this->privates['liip_imagine.factory.config.filter.rotate'] ?? ($this->privates['liip_imagine.factory.config.filter.rotate'] = new \Liip\ImagineBundle\Factory\Config\Filter\RotateFactory())), ($this->privates['liip_imagine.factory.config.filter.scale'] ?? $this->load('getLiipImagine_Factory_Config_Filter_ScaleService.php')), ($this->privates['liip_imagine.factory.config.filter.strip'] ?? ($this->privates['liip_imagine.factory.config.filter.strip'] = new \Liip\ImagineBundle\Factory\Config\Filter\StripFactory())), ($this->privates['liip_imagine.factory.config.filter.thumbnail'] ?? $this->load('getLiipImagine_Factory_Config_Filter_ThumbnailService.php')), ($this->privates['liip_imagine.factory.config.filter.upscale'] ?? $this->load('getLiipImagine_Factory_Config_Filter_UpscaleService.php')), ($this->privates['liip_imagine.factory.config.filter.watermark'] ?? ($this->privates['liip_imagine.factory.config.filter.watermark'] = new \Liip\ImagineBundle\Factory\Config\Filter\WatermarkFactory())));
